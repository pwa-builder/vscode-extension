{
    "SW Offline page": {
        "prefix": "pwa-sw-offline-page",
        "description": "",
        "body": [
            "//This is the \"Offline page\" service worker",
            "",
            "//Install stage sets up the offline page in the cahche and opens a new cache",
            "self.addEventListener('install', function(event) {",
            "\tvar offlinePage = new Request('offline.html');",
            "\tevent.waitUntil(",
            "\tfetch(offlinePage).then(function(response) {",
            "\t\treturn caches.open('pwabuilder-offline').then(function(cache) {",
            "\t\t\tconsole.log('[PWA Builder] Cached offline page during Install'+ response.url);",
            "\t\t\treturn cache.put(offlinePage, response);",
            "\t\t});",
            "\t}));",
            "});",
            "",
            "//If any fetch fails, it will show the offline page.",
            "//Maybe this should be limited to HTML documents?",
            "self.addEventListener('fetch', function(event) {",
            "\tevent.respondWith(",
            "\t\tfetch(event.request).catch(function(error) {",
            "\t\t\tconsole.error( '[PWA Builder] Network request Failed. Serving offline page ' + error );",
            "\t\t\treturn caches.open('pwabuilder-offline').then(function(cache) {",
            "\t\t\t\treturn cache.match('offline.html');",
            "\t\t\t});",
            "\t\t}));",
            "});",
            "",
            "//This is a event that can be fired from your page to tell the SW to update the offline page",
            "self.addEventListener('refreshOffline', function(response) {",
            "\treturn caches.open('pwabuilder-offline').then(function(cache) {",
            "\t\tconsole.log('[PWA Builder] Offline page updated from refreshOffline event: '+ response.url);",
            "\t\treturn cache.put(offlinePage, response);",
            "\t});",
            "});",
           ""
        ]
    },
    "SW Offline copy of images": {
        "prefix": "pwa-sw-offline-copy",
        "description": "",
        "body": [
            "//This is the \"Offline copy of pages\" service worker",
            "",
            "//Install stage sets up the index page (home page) in the cahche and opens a new cache",
            "self.addEventListener('install', function(event) {",
            "\tvar indexPage = new Request('index.html');",
            "\tevent.waitUntil(",
            "\t\tfetch(indexPage).then(function(response) {",
            "\t\t\treturn caches.open('pwabuilder-offline').then(function(cache) {",
            "\t\t\t\tconsole.log('[PWA Builder] Cached index page during Install'+ response.url);",
            "\t\t\t\treturn cache.put(indexPage, response);",
            "\t\t\t});",
            "\t}));",
            "});",
            "",
            "//If any fetch fails, it will look for the request in the cache and serve it from there first",
            "self.addEventListener('fetch', function(event) {",
            "\tvar updateCache = function(request){",
            "\t\treturn caches.open('pwabuilder-offline').then(function (cache) {",
            "\t\t\treturn fetch(request).then(function (response) {",
            "\t\t\t\tconsole.log('[PWA Builder] add page to offline'+response.url)",
            "\t\t\t\treturn cache.put(request, response);",
            "\t\t\t});",
            "\t\t});",
            "\t};",
            "",
            "\tevent.waitUntil(updateCache(event.request));",
            "",
            "\tevent.respondWith(",
            "\tfetch(event.request).catch(function(error) {",
            "\t\tconsole.log( '[PWA Builder] Network request Failed. Serving content from cache: ' + error );",
            "",
            "\t\t//Check to see if you have it in the cache",
            "\t\t//Return response",
            "\t\t//If not in the cache, then return error page",
            "\t\treturn caches.open('pwabuilder-offline').then(function (cache) {",
            "\t\t\treturn cache.match(event.request).then(function (matching) {",
            "\t\t\t\tvar report =  !matching || matching.status == 404?Promise.reject('no-match'): matching;",
            "\t\t\t\treturn report",
            "\t\t\t});",
            "\t\t});",
            "\t})",
            "\t);",
            "})"
        ]
    },
    "SW Offline copy with Backup offline page": {
        "prefix": "pwa-sw-offline-backup",
        "description": "",
        "body": [
            "//This is the service worker with the combined offline experience (Offline page + Offline copy of pages)",
            "",
            "//Install stage sets up the offline page in the cahche and opens a new cache",
            "self.addEventListener('install', function(event) {",
            "\tevent.waitUntil(preLoad());",
            "});",
            "",
            "var preLoad = function(){",
            "\tconsole.log('[PWA Builder] Install Event processing');",
            "\treturn caches.open('pwabuilder-offline').then(function(cache) {",
            "\t\tconsole.log('[PWA Builder] Cached index and offline page during Install');",
            "\t\treturn cache.addAll(['/offline.html', '/index.html']);",
            "\t});",
            "}",
            "",
            "self.addEventListener('fetch', function(event) {",
            "\tconsole.log('The service worker is serving the asset.');",
            "\tevent.respondWith(checkResponse(event.request).catch(function() {",
            "\t\treturn returnFromCache(event.request)}",
            "\t));",
            "\tevent.waitUntil(addToCache(event.request));",
            "});",
            "",
            "var checkResponse = function(request){",
            "\treturn new Promise(function(fulfill, reject) {",
            "\tfetch(request).then(function(response){",
            "\t\tif(response.status !== 404) {",
            "\t\t\tfulfill(response)",
            "\t\t} else {",
            "\t\t\treject()",
            "\t\t}",
            "\t}, reject)",
            "\t});",
            "};",
            "",
            "var addToCache = function(request){",
            "\treturn caches.open('pwabuilder-offline').then(function (cache) {",
            "\t\treturn fetch(request).then(function (response) {",
            "\t\t\tconsole.log('[PWA Builder] add page to offline'+response.url)",
            "\t\t\treturn cache.put(request, response);",
            "\t\t});",
            "\t});",
            "};",
            "",
            "var returnFromCache = function(request){",
            "\treturn caches.open('pwabuilder-offline').then(function (cache) {",
            "\t\treturn cache.match(request).then(function (matching) {",
            "\t\t\tif(!matching || matching.status == 404) {",
            "\t\t\t\treturn cache.match('offline.html')",
            "\t\t\t} else {",
            "\t\t\t\treturn matching",
            "\t\t\t}",
            "\t\t});",
            "\t});",
            "};"
        ]
    },
    "SW Cache-first network": {
        "prefix": "pwa-sw-cachefirst-network",
        "description": "",
        "body": [
            "//This is the service worker with the Cache-first network",
            "",
            "var CACHE = 'pwabuilder-precache';",
            "var precacheFiles = [",
            "\t/* Add an array of files to precache for your app */",
            "];",
            "",
            "//Install stage sets up the cache-array to configure pre-cache content",
            "self.addEventListener('install', function(evt) {",
            "\tconsole.log('The service worker is being installed.');",
            "\tevt.waitUntil(precache().then(function() {",
            "\t\tconsole.log('[ServiceWorker] Skip waiting on install');",
            "\t\treturn self.skipWaiting();",
            "\t})",
            "\t);",
            "});",
            "",
            "//allow sw to control of current page",
            "self.addEventListener('activate', function(event) {",
            "\tconsole.log('[ServiceWorker] Claiming clients for current page');",
            "\treturn self.clients.claim();",
            "});",
            "",
            "self.addEventListener('fetch', function(evt) {",
            "\tconsole.log('The service worker is serving the asset.'+ evt.request.url);",
            "\tevt.respondWith(fromCache(evt.request).catch(fromServer(evt.request)));",
            "\tevt.waitUntil(update(evt.request));",
            "});",
            "",
            "function precache() {",
            "\treturn caches.open(CACHE).then(function (cache) {",
            "\t\treturn cache.addAll(precacheFiles);",
            "\t});",
            "}",
            "",
            "function fromCache(request) {",
            "\t//we pull files from the cache first thing so we can show them fast",
            "\treturn caches.open(CACHE).then(function (cache) {",
            "\t\treturn cache.match(request).then(function (matching) {",
            "\t\t\treturn matching || Promise.reject('no-match');",
            "\t\t});",
            "\t});",
            "}",
            "",
            "function update(request) {",
            "\t//this is where we call the server to get the newest version of the ",
            "\t//file to use the next time we show view",
            "\treturn caches.open(CACHE).then(function (cache) {",
            "\t\treturn fetch(request).then(function (response) {",
            "\t\t\treturn cache.put(request, response);",
            "\t\t});",
            "\t});",
            "}",
            "",
            "function fromServer(request){",
            "\t//this is the fallback if it is not in the cahche to go to the server and get it",
            "\treturn fetch(request).then(function(response){ return response})",
            "}"
        ]
    },

    "Web Offline page": {
        "prefix": "pwa-web-offline-page",
        "description": "",
        "body": [
            "//This is the \"Offline page\" service worker",
            "",
            "//Add this below content to your HTML page, or add the js file to your page at the very top to register sercie worker",
            "if (navigator.serviceWorker.controller) {",
            "\tconsole.log('[PWA Builder] active service worker found, no need to register')",
            "} else {",
            "//Register the ServiceWorker",
            "\tnavigator.serviceWorker.register('pwabuilder-sw.js', {",
            "\t\tscope: './'",
            "\t}).then(function(reg) {",
            "\t\tconsole.log('Service worker has been registered for scope:'+ reg.scope);",
            "\t});",
            "}"
  
        ]
    },
    "Web Offline copy of images": {
        "prefix": "pwa-web-offline-copy",
        "description": "",
        "body": [
            "//This is the \"Offline copy of pages\" service worker",
            "",
            "//Add this below content to your HTML page, or add the js file to your page at the very top to register sercie worker",
            "if (navigator.serviceWorker.controller) {",
            "\tconsole.log('[PWA Builder] active service worker found, no need to register')",
            "} else {",
            "\t//Register the ServiceWorker",
            "\tnavigator.serviceWorker.register('pwabuilder-sw.js', {",
            "\t\tscope: './'",
            "\t\t}).then(function(reg) {",
            "\t\tconsole.log('Service worker has been registered for scope:'+ reg.scope);",
            "\t});",
            "}"
  
        ]
    },
    "Web Offline copy with Backup offline page": {
        "prefix": "pwa-web-offline-backup",
        "description": "",
        "body": [
            "//This is the service worker with the combined offline experience (Offline page + Offline copy of pages)",
            "",
            "//Add this below content to your HTML page, or add the js file to your page at the very top to register sercie worker",
            "if (navigator.serviceWorker.controller) {",
            "\tconsole.log('[PWA Builder] active service worker found, no need to register')",
            "} else {",
            "",
            "\t//Register the ServiceWorker",
            "\tnavigator.serviceWorker.register('pwabuilder-sw.js', {",
            "\t\tscope: './'",
            "\t}).then(function(reg) {",
            "\t\tconsole.log('Service worker has been registered for scope:'+ reg.scope);",
            "\t});",
            "}"
  
        ]
    },
    "Web Cache-first network": {
        "prefix": "pwa-web-cachefirst-network",
        "description": "",
        "body": [
            "//This is the service worker with the Cache-first network",
            "",
            "//Add this below content to your HTML page, or add the js file to your page at the very top to register sercie worker",
            "if (navigator.serviceWorker.controller) {",
            "\tconsole.log('[PWA Builder] active service worker found, no need to register')",
            "} else {",
            "",
            "//Register the ServiceWorker",
            "\tnavigator.serviceWorker.register('pwabuilder-sw.js', {",
            "\t\tscope: './'",
            "\t}).then(function(reg) {",
            "\t\tconsole.log('Service worker has been registered for scope:'+ reg.scope);",
            "\t});",
            "}"
        ]
    }
}